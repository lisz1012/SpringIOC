<?xml version="1.0" encoding="UTF-8"?>
<!--  -->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd">
    <!-- xml麻烦，但是真中配置方式比较完整 -->
    <!-- 根据属性值设定的时候，name的名称取决于set方法后面的Xxx首字母小写的名称 -->
    <!-- 日常工作中一般使用name的方式，很少使用index和type的方式，但要注意各种情况会出现的问题 -->
    <!-- name表示参数面，value表示实际的具体值，type表示值的类型，index表示在constructor中的下标，从0开始 -->
    <bean id="person" class="com.lisz.bean.Person">
        <property name="id" value="1" />
        <property name="name" value="zhangsan" />
        <property name="age" value="20" />
        <property name="gender" value="男" />
        <property name="date" value="2020/01/21" />
    </bean>
    <bean id="person2" class="com.lisz.bean.Person">
        <property name="id" value="2" />
        <property name="name" value="zhangsan2" />
        <property name="age" value="22" />
        <property name="gender" value="女" />
        <property name="date" value="2020/01/21" />
    </bean>
    <!-- 使用构造器方法复制的时候，constructor-arg的name属性是由构造方法参数列表的名称决定的 -->
    <bean id="person3" class="com.lisz.bean.Person">
        <constructor-arg name="id" value="3" />
        <constructor-arg name="name" value="lisi" />
        <constructor-arg name="age" value="20" />
        <constructor-arg name="gender" value="男" />
        <constructor-arg name="date" value="2020/01/21" />
    </bean>
    <!-- 使用构造器方法复制的时候，constructor-arg的name属性名可以省略，但要注意顺序要跟参数列表的顺序一致 -->
    <bean id="person4" class="com.lisz.bean.Person">
        <constructor-arg value="3" />
        <constructor-arg value="abc" />
        <constructor-arg value="21" />
        <constructor-arg value="男" />
        <constructor-arg value="2020/01/21" />
    </bean>
    <!-- 使用构造器方法复制的时候，constructor-arg的name属性可以名省略，但要注意顺序要跟参数列表的顺序一致 乱序了的话要标注index-->
    <bean id="person5" class="com.lisz.bean.Person">
        <constructor-arg value="男" index="3"/>
        <constructor-arg value="4" index="0"/>
        <constructor-arg value="abc" index="1"/>
        <constructor-arg value="21" index="2"/>
        <constructor-arg value="2020/01/21" />
    </bean>
    <!-- 两个构造方法参数个数相同的话，会覆盖，避免覆盖，在value后面再写type，指定参数类型，id一般用Integer而不是int -->
    <bean id="person6" class="com.lisz.bean.Person">
        <constructor-arg value="5" />
        <constructor-arg value="abc" />
        <constructor-arg value="21" />
    </bean>
    <!-- 使用p命名空间给属性赋值(用得很少) -->
    <bean id="person7" class="com.lisz.bean.Person" p:id="7" p:name="wangwu" p:age="12" p:gender="女" p:date="2020/02/01" />
    <!-- 给复杂类型进行赋值操作 -->
    <bean id="person8" class="com.lisz.bean.Person">
        <property name="id" value="8" />
        <property name="name" value="zhangsan" />
        <property name="age" value="27" />
        <property name="gender" value="男" />
        <property name="date" value="2020/01/31" />
        <!-- <property name="hobbies" value="Soccer,Dancing,Cooking" /> 会自动转换成字符串数组-->
        <property name="hobbies">
            <array>
                <value>Soccer</value>
                <value>Dancing</value>
                <value>Cooking</value>
            </array>
        </property>
        <property name="address" ref="address"></property>
        <property name="list">
            <list>
                <value>A</value>
                <value>B</value>
                <value>C</value>
            </list>
        </property>
        <property name="addresses">
            <list>
                <!-- 外部bean，代码里可以随意从IOC容器中引用到 -->
                <ref bean="address1" />
                <ref bean="address2" />
                <ref bean="address3" />
                <!-- list内部bean，代码里不可以从IOC容器中引用到 -->
                <bean id="address4" class="com.lisz.bean.Address">
                    <property name="province" value="火星" />
                    <property name="city" value="火星城市1" />
                    <property name="town" value="C区" />
                </bean>
            </list>
        </property>
        <property name="set">
            <set>
                <value>1</value>
                <value>2</value>
                <value>3</value>
                <value>3</value><!--set无重复-->
            </set>
        </property>
        <property name="map">
            <map>
                <entry key="1" value="A" />
                <entry key="2" value-ref="address1" />
                <entry key="3">
                    <bean class="com.lisz.bean.Address">
                        <property name="province" value="湖北" />
                        <property name="city" value="武汉" />
                        <property name="town" value="江北" />
                    </bean>
                </entry>
                <entry>
                    <key><value>hehe</value></key>
                    <value>haha</value>
                </entry>
                <entry>
                    <key><value>hehe</value></key>
                    <value>haha</value>
                </entry>
                <entry key="list">
                    <list>
                        <value>1</value>
                        <value>2</value>
                    </list>
                </entry>
            </map>
        </property>
        <property name="properties">
            <props>
                <prop key="a">A</prop>
                <prop key="b">B</prop>
                <prop key="c">C</prop>
            </props>
        </property>
    </bean>
    <bean id="address" class="com.lisz.bean.Address">
        <property name="province" value="山东" />
        <property name="city" value="济南" />
        <property name="town" value="历下" />
    </bean>
    <bean id="address1" class="com.lisz.bean.Address">
        <property name="province" value="北京" />
        <property name="city" value="东城" />
        <property name="town" value="aaa" />
    </bean>
    <bean id="address2" class="com.lisz.bean.Address">
        <property name="province" value="上海" />
        <property name="city" value="上海" />
        <property name="town" value="上海某区" />
    </bean>
    <bean id="address3" class="com.lisz.bean.Address">
        <property name="province" value="华盛顿" />
        <property name="city" value="西雅图" />
        <property name="town" value="Shoreline" />
    </bean>

    <!-- bean之间的继承 abstract="true"之后就无法实例化了-->
    <bean id="parent" class="com.lisz.bean.Person" abstract="false">
        <property name="id" value="1" />
        <property name="name" value="zhangsan" />
        <property name="age" value="20" />
        <property name="gender" value="男" />
        <property name="date" value="2020/01/21" />
    </bean>
    <!-- 可以通过parent属性来获取父bean中的某些属性 -->
    <bean id="child" class="com.lisz.bean.Person" parent="parent">
        <property name="name" value="haha"/>
    </bean>

    <!-- 创建bean时的依赖关系，创建的顺序和bean在这个xml文件里定义的顺序是一样的 depends-on就想让person9先于address5创建
    一般在实际工作中不必在意这个顺序，无论谁先创建，需要依赖的对象在创建完成之后都会进行赋值操作-->
    <bean id="address5" class="com.lisz.bean.Address" depends-on="person9"/>
    <bean id="person9" class="com.lisz.bean.Person" />

    <!-- 设置bean对象的作用域。通过scope属性指定
     singleton 单例（默认）
     prototype 原型，多例模式，从IOC容器中获取的对象，每次都是新创建的
     request(<=spring 4.x): 每次请求都会有一个新的对象（从来没用过，因此被淘汰）
     session(<=spring 4.x): 每一次会话都会有一个新的（从来没用过，因此被淘汰）
     注意：如果是singleton作用域，每次在创建IOC容器完成之前，此对象已经创建完成
          如果是prototype作用域，每次是在需要用到新对象的时候才会创建-->
    <bean id="person10" class="com.lisz.bean.Person" scope="prototype" />

    <!-- 静态工厂方法创建类 静态工厂比较死板单一 -->
    <bean id="staticPerson" class="com.lisz.factory.PersonStaticFactory" factory-method="getInstance">
        <constructor-arg value="zhangsan"/>
    </bean>

    <!-- 实例工厂方法创建类. 先创建工厂的实例，然后再调用实例的工厂方法
    class="com.lisz.bean.Person"可以省略 实例工厂的扩展会比较完善.-->
    <bean id="personInstanceFactory" class="com.lisz.factory.PersonInstanceFactory" />
    <bean id="instancePerson" factory-bean="personInstanceFactory" factory-method="getInstance">
        <constructor-arg value="lisi" />
    </bean>

    <!-- FactoryBean可以让用户自己创建Bean让后交给Spring来控制. 这个
    接口的实现类，Spring都会将其作为一个工厂，但是在IOC容器启动的时候不会
    创建实例，只有在使用的时候才会创建对象。这种方式是spring在创建对象时的
     一种补充，用户可以按照自己需求创建对象，并将其交由spring IOC进行管理。
     自己用的时候用的不多-->
    <bean id="myBeanFactory" class="com.lisz.factory.MyFactoryBean" />

    <!-- 生命周期方法调用
    init-method: 在对象创建完成之后会调用这里指定的初始化方法
    destroy-method：在容器关闭的时候会调用这里指定的销毁方法
    要强制转换：((ClassPathXmlApplicationContext)context).close();
    才能调用close()，看到destroy方法的调用结果.如果scope是singleton，初始化
    和销毁方法都会被调用，如果是scope是prototype，则只会调用初始化方法-->
    <bean id="person12" class="com.lisz.bean.Person" init-method="init" destroy-method="destroy">
        <property name="id" value="4" />
        <property name="name" value="aaa" />
    </bean>

    <!-- spring中包含一个BeanPostProcessor接口，可以在bean的初始化方法init-method的前后调用该方法，
     如果配置了初始化方法的前置和后置处理器，无论是否包含初始化方法，都会进行调用, init-method
     指定的方法会在构造方法执行之后被调用，所以这两个方法都是在构造方法之后被执行，对所有的
     bean对象（包括上面说的Factory）都生效。如果想对具体的类型或者bean实例做操作，则
     在postProcessBeforeInitialization和postProcessBeforeInitialization中做判断-->
    <bean id="myBeanPostProcessor" class="com.lisz.bean.MyBeanPostProcessor" />

    <!-- Spring管理第三方bean,没启动MySQL会报错 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="username" value="root" />
        <property name="password" value="^abc123$" />
        <property name="url" value="jdbc:mysql://localhost:3306/ssm" />
        <property name="driverClassName" value="com.mysql.cj.jdbc.Driver" />
    </bean>

    <!-- 当需要引入外部的配置文件的时候需要导入context的命名空间，就是告诉IOC配置文件的路径:
    在beansxmlns那里加上一行：xmlns:context="http://www.springframework.org/schema/context"
    在schemaLocation="..."里加上两行：
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context.xsd-->
    <context:property-placeholder location="classpath:db.properties" /> <!-- location="db.properties"也行 -->
    <!-- 最好在配置文件中添加前缀，用来跟系统环境变量名区分 -->
    <bean id="dataSource2" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="username" value="${username}" /> <!-- 从上面的db.properties中取值 -->
        <property name="password" value="${password}" />
        <property name="url" value="${url}" />
        <property name="driverClassName" value="${driverClassName}" />
    </bean>

    <!-- 自动装配 -->
    <bean id="address4" class="com.lisz.bean.Address">
        <property name="province" value="山东" />
        <property name="city" value="青岛" />
        <property name="town" value="市南" />
    </bean>
    <!-- default: 不自动装配
         byName: 按照setter中set后面的的名字首字母小写设置的（最常用，一般就用这个）
         byType: 按照类型, 一旦多个相同类型的bean会报错。List<Address> Map<Address>也会自动注入
         constructor：按照构造器进行装配，先按照有参构造器参数的类型进行装配，没有就直接装配null；如果按照类型
                      找到了多个，那么就使用参数名作为id继续装配，找到就装配，找不到就装配null
         autowire属性就省去了ref指定装配哪个bean进来
         -->
    <bean id="person13" class="com.lisz.bean.Person" autowire="byName" />
    <bean id="person14" class="com.lisz.bean.Person" autowire="constructor" />

    <!-- SpEL，用的不多，注解为主 -->
    <bean id="person15" class="com.lisz.bean.Person">
        <!-- 可以引入bean对象的属性 -->
        <property name="name" value="#{address.province}" />
        <!-- 支持运算 -->
        <property name="age" value="#{12*2}" />
        <!-- 引入外部bean -->
        <property name="address" value="#{address}" /> <!-- ref="address"-->
        <!-- 调用静态方法 -->
        <property name="gender" value="#{T(java.util.UUID).randomUUID().toString().substring(0, 5)}" />
        <!-- 调用非静态方法, 要有个bean，id叫做address -->
        <property name="hobbies" value="#{address.getCity()}" />
    </bean>
</beans>